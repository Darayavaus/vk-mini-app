{"version":3,"sources":["panels/Home.js","panels/MapView.js","App.js","index.js"],"names":["Home","id","go","fetchedUser","title","before","photo_200","src","description","city","first_name","last_name","size","level","onClick","data-to","osName","platform","MapView","props","left","IOS","className","defaultState","center","zoom","geometry","App","useState","activePanel","setActivePanel","setUser","setLocation","popout","setPopout","useEffect","a","connect","sendPromise","user","send","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","then","console","log","lat","lon","catch","error","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"gtBA8CeA,EApCF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAIC,EAAX,EAAWA,YAAX,OACZ,kBAAC,IAAD,CAAOF,GAAIA,GACV,kBAAC,IAAD,gBACCE,GACD,kBAAC,IAAD,CAAOC,MAAM,qCACZ,kBAAC,IAAD,CACCC,OAAQF,EAAYG,UAAY,kBAAC,IAAD,CAAQC,IAAKJ,EAAYG,YAAe,KACxEE,YAAaL,EAAYM,MAAQN,EAAYM,KAAKL,MAAQD,EAAYM,KAAKL,MAAQ,IAFpF,UAIKD,EAAYO,WAJjB,YAI+BP,EAAYQ,aAI5C,kBAAC,IAAD,CAAOP,MAAM,sBACZ,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAQQ,KAAK,KAAKC,MAAM,IAAIC,QAASZ,EAAIa,UAAQ,YAAjD,iF,sECbEC,G,OAASC,eAuBAC,EArBC,SAAAC,GAAK,OACpB,kBAAC,IAAD,CAAOlB,GAAIkB,EAAMlB,IAChB,kBAAC,IAAD,CACCmB,KAAM,kBAAC,IAAD,CAAcN,QAASK,EAAMjB,GAAIa,UAAQ,QAC7CC,IAAWK,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,SAI3C,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKC,UAAU,UAAUC,aAAc,CAAEC,OAAQ,CAAC,MAAO,OAAQC,KAAM,IACtE,kBAAC,IAAD,CAAWC,SAAU,CAAC,MAAO,aCkClBC,EAjDH,WAAO,IAAD,EACqBC,mBAAS,YAD9B,mBACVC,EADU,KACGC,EADH,OAEeF,mBAAS,MAFxB,mBAETzB,EAFS,KAEI4B,EAFJ,OAGgBH,mBAAS,CAAC,OAAQ,SAHlC,mBAGCI,GAHD,aAIYJ,mBAAS,kBAAC,IAAD,CAAehB,KAAK,WAJzC,mBAITqB,EAJS,KAIDC,EAJC,KAkBjBC,qBAAU,WAAM,4CAQf,4BAAAC,EAAA,sEACuBC,IAAQC,YAAY,uBAD3C,cACUC,EADV,gBAEsBF,IAAQG,OAF9B,cAGCT,EAAQQ,GACRL,EAAU,MAJX,4CARe,sBACfG,IAAQI,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACpC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQJ,EAAKK,OAASL,EAAKK,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,OALzB,mCAcbQ,GAzBAhB,IACGC,YAAY,sBACZgB,MAAK,SAAAV,GACJW,QAAQC,IAAI,WAAYZ,EAAKa,KAC7BzB,EAAY,CAACY,EAAKa,IAAKb,EAAKc,SAE7BC,OAAM,SAAAC,GACLL,QAAQC,IAAI,QAASI,QAqBzB,IAEH,IAAM1D,EAAK,SAAA2D,GACV/B,EAAe+B,EAAEC,cAAcC,QAAQC,KAGxC,OACC,kBAAC,IAAD,CAAMnC,YAAaA,EAAaI,OAAQA,GACvC,kBAAC,EAAD,CAAMhC,GAAG,OAAOE,YAAaA,EAAaD,GAAIA,IAC9C,kBAAC,EAAD,CAASD,GAAG,WAAWC,GAAIA,MC5C9BmC,IAAQG,KAAK,gBAQbyB,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,W","file":"static/js/main.8390f929.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n\nconst Home = ({ id, go, fetchedUser }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Example</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Group title=\"User Data Fetched with VK Connect\">\n\t\t\t<Cell\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n\t\t\t\tdescription={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n\t\t\t>\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\n\t\t<Group title=\"Navigation Example\">\n\t\t\t<Div>\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"map-view\">\n\t\t\t\t\tОткрыть карту\n\t\t\t\t</Button>\n\t\t\t</Div>\n\t\t</Group>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport { YMaps, Map, Placemark } from 'react-yandex-maps';\n\nimport './MapView.css';\n\nconst osName = platform();\n\nconst MapView = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</HeaderButton>}\n\t\t>\n\t\t</PanelHeader>\n\t\t<YMaps>\n\t\t\t<Map className=\"mapview\" defaultState={{ center: [55.75, 37.57], zoom: 9 }}>\n\t\t\t\t<Placemark geometry={[55.75, 37.57]} />\n\t\t\t</Map>\n\t\t</YMaps>\t\n\t</Panel>\n);\n\nMapView.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default MapView;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport MapView from './panels/MapView';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('map-view');\n  const [fetchedUser, setUser] = useState(null);\n  const [location, setLocation] = useState([55.798, 49.106]);\n  const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n  \n  const fetchLocation = () => {\n    connect\n      .sendPromise('VKWebAppGetGeodata')\n      .then(data => {\n        console.log('latitude', data.lat);\n        setLocation([data.lat, data.lon])\n      })\n      .catch(error => {\n        console.log('error', error)\n      });\n  }\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n      const user = await connect.sendPromise('VKWebAppGetUserInfo');\n      const loc = await connect.send()\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n    fetchData();\n    fetchLocation();\n\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t<MapView id='map-view' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}